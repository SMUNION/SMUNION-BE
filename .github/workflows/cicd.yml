name: Java CI/CD with Gradle 

on: 
  push:
    branches: [ "main" ] 

jobs:
  deploy: 
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # 2. JDK 세팅
      - name: Set up JDK 17 
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. application.yml 파일 설정
      - name: Make application.yml
        run: | 
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > src/main/resources/application.yml

      # 4. Firebase 설정 파일 생성
      - name: Make firebase-adminsdk.json from base64
        run: |
          mkdir -p src/main/resources/firebase
          echo "${{ secrets.FIREBASE_ADMIN_SDK_JSON_BASE64 }}" | base64 -d > src/main/resources/firebase/echo-notification-2a32e-firebase-adminsdk-ho4fd-8fcd82aa12.json

      # 5. Gradlew에 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew 

      # 6. Spring Boot 애플리케이션 빌드
      - name: Spring Boot Build
        run: ./gradlew clean build -x test

      # 7. Docker 이미지 빌드
      - name: Docker Image Build 
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }} .

      # 8. DockerHub 로그인
      - name: Docker Hub Login
        uses: docker/login-action@v2
        with: 
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 9. DockerHub에 이미지 푸시
      - name: Docker Hub push 
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }}

      # 10. AWS EC2에 접속하여 Docker 컨테이너 실행
      - name: AWS EC2 Connection
        uses: appleboy/ssh-action@v0.1.6 
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          password: ${{ secrets.EC2_PASSWORD }}
          port: ${{ secrets.EC2_SSH_PORT }}
          timeout: 60s
          script: | 
            sudo docker stop ${{ secrets.DOCKERHUB_IMAGENAME }} || true
            sudo docker rm ${{ secrets.DOCKERHUB_IMAGENAME }} || true
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }}
            sudo docker run -it -d --network host --name ${{ secrets.DOCKERHUB_IMAGENAME }} \
              -e TZ=Asia/Seoul \
              ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }}
